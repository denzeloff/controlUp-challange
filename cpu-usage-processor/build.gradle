plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.controlup'
version = '1.0.0'
sourceCompatibility = '21'
targetCompatibility = '21'

repositories {
    mavenCentral()
}

ext {
    flinkVersion = '1.20.2'
    kafkaVersion = '3.6.1'
    slf4jVersion = '2.0.9'
    jacksonVersion = '2.16.1'
}

dependencies {
    // Apache Flink
    implementation "org.apache.flink:flink-connector-base:${flinkVersion}"
    implementation "org.apache.flink:flink-json:${flinkVersion}"
    implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
    implementation "org.apache.flink:flink-clients:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-kafka:3.1.0-1.18"

    // JSON processing
    implementation "org.apache.flink:flink-json:${flinkVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"

    // Commons Math for percentile calculations
    implementation 'org.apache.commons:commons-math3:3.6.1'
    // Logging
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    runtimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"

    // Test dependencies
    testImplementation "org.apache.flink:flink-test-utils:${flinkVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.mockito:mockito-core:5.8.0'
}

application {
    mainClass = 'com.controlup.processor.CpuUsageProcessorApplication'
}

shadowJar {
    archiveBaseName = 'cpu-usage-processor'
    archiveClassifier = ''
    archiveVersion = ''

    manifest {
        attributes 'Main-Class': 'com.controlup.processor.CpuUsageProcessorApplication'
    }

    // Exclude signatures to avoid conflicts
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    // Transform services to avoid conflicts
    mergeServiceFiles()
}

tasks.named('test') {
    useJUnitPlatform()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
}
