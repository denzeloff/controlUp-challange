version: "3.8"

services:
  kafka:
    image: apache/kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      # KRaft configuration
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER

      # Listeners configuration
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT

      # Basic configuration
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      # Cluster ID
      KAFKA_CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"

    volumes:
      - kafka_data:/var/lib/kafka/data

    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server kafka:9092 >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  kafka-init:
    image: apache/kafka:latest
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command: |
      "
      echo 'Creating Kafka topics...'
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic events --partitions 3 --replication-factor 1
      echo 'Topics created successfully!'
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
      "

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: controlup
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  cpu-usage-processor:
    build:
      context: ../cpu-usage-processor
      dockerfile: Dockerfile
    container_name: cpu-usage-processor
    ports:
      - "8081:8081"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      cpu-metrics-handler:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'java.*app.jar' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  cpu-metrics-handler:
    build:
      context: ../cpu-metrics-handler
      dockerfile: Dockerfile
    container_name: cpu-metrics-handler
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/controlup
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'java.*app.jar' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  cpu-metrics-api:
    build:
      context: ../cpu-metrics-api
      dockerfile: Dockerfile
    container_name: cpu-metrics-api
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/controlup
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  test-producer:
    build:
      context: ../test
      dockerfile: Dockerfile
    container_name: test-producer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: events
      PRODUCER_RATE: 100  # events per second
      NUM_DEVICES: 50     # number of different device IDs to simulate
    depends_on:
      kafka:
        condition: service_healthy
      cpu-usage-processor:
        condition: service_healthy
    networks:
      - default
    healthcheck:
      test: [ "CMD-SHELL", "pgrep -f 'java.*app.jar' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  kafka_data:
    driver: local
  postgres_data:
    driver: local
